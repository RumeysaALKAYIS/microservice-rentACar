package com.kodlama.inventoryService.business.concretes;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.kodlama.common.utilities.exceptions.BusinessExeption;
import com.kodlama.common.utilities.mapping.ModelMapperService;
import com.kodlama.inventoryService.business.abstracts.ModelService;
import com.kodlama.inventoryService.business.requeses.creates.CreateModelRequest;
import com.kodlama.inventoryService.business.requeses.updates.UpdateModelRequest;
import com.kodlama.inventoryService.business.responses.create.CreateModelResponse;
import com.kodlama.inventoryService.business.responses.get.GetAllCarsResponse;
import com.kodlama.inventoryService.business.responses.get.GetAllModelResponse;
import com.kodlama.inventoryService.business.responses.update.UpdateModelResponse;
import com.kodlama.inventoryService.dataAccess.ModelRepository;
import com.kodlama.inventoryService.entities.Car;
import com.kodlama.inventoryService.entities.Model;

@Service
public class ModelManager implements ModelService {

	private ModelRepository modelRepository;
	private ModelMapperService mapperService;

	@Override
	public List<GetAllModelResponse> getAll() {
		List<Model> modells = this.modelRepository.findAll();
		List<GetAllModelResponse> allModelResponses = modells.stream()
				.map(m -> this.mapperService.forResponse().map(m, GetAllModelResponse.class))
				.collect(Collectors.toList());

		return allModelResponses;
	}

	@Override
	public CreateModelResponse add(CreateModelRequest createModelRequest) {

		checkIfBrandExistsByName(createModelRequest.getName());
		Model model = this.mapperService.forRequest().map(createModelRequest, Model.class);
		model.setId(UUID.randomUUID().toString());
		CreateModelResponse createModelResponse = this.mapperService.forResponse().map(model,
				CreateModelResponse.class);
		return createModelResponse;
	}

	private void checkIfBrandExistsByName(String name) {
		Model currentModel = this.modelRepository.findByName(name);
		if (currentModel != null) {
			throw new BusinessExeption("BRAND.EXISTS");
		}
	}

	@Override
	public GetAllModelResponse getById(String id) {
		Model model = this.modelRepository.findById(id).get();

		GetAllModelResponse allModelResponse = this.mapperService.forResponse().map(model, GetAllModelResponse.class);
		return allModelResponse;
	}

	@Override
	public UpdateModelResponse update(UpdateModelRequest updateModelRequest) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(String id) {
		// TODO Auto-generated method stub
		
	}

}